Alka Priya21:37
let getData = (name) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => { // Database 
            name = 'alka';
            resolve(name);
            if (!name) {
                reject(null);
            }
        }, 200);

    })
}

async function example() {
    const name = await getData();
    console.log(name);

}
Alka Priya21:42
let getData = (name) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => { // Database 
            // name = 'alka';
            if (name) {
                resolve(name);
            }
            if (!name) {
                reject(null);
            }
        }, 200);

    });
}

async function example() {
    let name;
    try {
        name = await getData();

    } catch (err) {
        name = err;
    }
    console.log(name);

}

example();
Alka Priya22:11
function cb(num) {
    setTimeout(() => {
        num * 10;
    }, 200);
    console.log(num);

};

function example(num, cb) {
    cb(num);
    console.log('hello');
};

example(10, cb);
Alka Priya22:22
const { Observable, from, of } = require('rxjs');

// Convert string to observable
// The observable will emit the sequence of characters in the string
const observableFromString = from('Hello RxJS!');
observableFromString.subscribe((character) => console.log(character), err =>  {});
https://medium.com/thecodinghype/reactive-programming-in-javascript-using-rxjs-3b05e186c115
You22:27
function Employee(name) {
    this.name = name;

    this.say = function () {
        console.log("I am employee " + name);
    };
}

function EmployeeFactory() {

    this.create = function (name) {
        return new Employee(name);
    };
}

function Vendor(name) {
    this.name = name;

    this.say = function () {
        console.log("I am vendor " + name);
    };
}

function VendorFactory() {

    this.create = function (name) {
        return new Vendor(name);
    };
}

function run() {
 
You22:29
//Sigelton.js
var Singleton = (function () {
    var instance;

    function createInstance() {
        var object = new Object("I am the instance");
        return object;
    }

    return {
        getInstance: function () {
            if (!instance) {
                instance = createInstance();
            }
            return instance;
        }
    };
})();

function run() {

    var instance1 = Singleton.getInstance();
    var instance2 = Singleton.getInstance();

    console.log("Same instance? " + 
yoa-wyvc-xzk